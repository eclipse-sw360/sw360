/*
 * Copyright Siemens AG, 2016. Part of the SW360 Portal Project.
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.sw360.vulnerabilities.common;

import org.eclipse.sw360.datahandler.common.SW360Utils;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.ReleaseVulnerabilityRelation;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.Vulnerability;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.VulnerabilityDTO;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * maps the updates of a new element to an existing one
 *
 * @author stefan.jaeger@evosoft.com
 */
public class VulnerabilityMapper {

    private final static Logger log = LogManager.getLogger(VulnerabilityMapper.class);

    private VulnerabilityMapper() {
    }

    public static Vulnerability setLastUpdate(Vulnerability vulnerability){
        if (vulnerability != null){
            return vulnerability.setLastUpdateDate(SW360Utils.getCreatedOnTime());
        }
        return vulnerability;
    }

    public static Vulnerability updateVulnerability(Vulnerability oldElement, Vulnerability update){
        if (oldElement != null && update != null){
            return new Vulnerability(oldElement)
                    .setTitle(update.getTitle())
                    .setDescription(update.getDescription())
                    .setPublishDate(update.getPublishDate())
                    .setLastUpdateDate(update.getLastUpdateDate())
                    .setLastExternalUpdate(update.getLastExternalUpdate())
                    .setPriority(update.getPriority())
                    .setPriorityText(update.getPriorityText())
                    .setAction(update.getAction())
                    .setImpact(update.getImpact())
                    .setAssignedExtComponentIds(update.getAssignedExtComponentIds())
                    .setVendorAdvisories(update.getVendorAdvisories())
                    .setLegalNotice(update.getLegalNotice())
                    .setExtendedDescription(update.getExtendedDescription())
                    .setCveReferences(update.getCveReferences())
                    .setReferences(update.getReferences());
        }
        return oldElement;
    }

    public static VulnerabilityDTO createVulnerabilityDTO(Vulnerability element){
        if (element != null){
            return new VulnerabilityDTO(element.getExternalId())
                    .setId(element.getId())
                    .setTitle(element.getTitle())
                    .setDescription(element.getDescription())
                    .setPublishDate(element.getPublishDate())
                    .setLastExternalUpdate(element.getLastExternalUpdate())
                    .setPriority(element.getPriority())
                    .setPriorityToolTip(element.getPriorityText())
                    .setAction(element.getAction())
                    .setImpact(element.getImpact())
                    .setLegalNotice(element.getLegalNotice())
                    .setCveReferences(element.getCveReferences())
                    .setReferences(element.getReferences());
        }
        return null;

    }

    public static Vulnerability updateFromVulnerability(Vulnerability destination, Vulnerability source){
        for(Vulnerability._Fields field: Vulnerability._Fields.values()){
            if(field.equals(Vulnerability._Fields.REVISION) || field.equals(Vulnerability._Fields.ID)){
                continue;
            }
            destination.setFieldValue(field, source.getFieldValue(field));
        }
        return destination;
    }

    public static ReleaseVulnerabilityRelation updateFromReleaseVulnerabilityRelation(ReleaseVulnerabilityRelation destination, ReleaseVulnerabilityRelation source){
        for(ReleaseVulnerabilityRelation._Fields field: ReleaseVulnerabilityRelation._Fields.values()){
            if(field.equals(ReleaseVulnerabilityRelation._Fields.REVISION)
                    || field.equals(ReleaseVulnerabilityRelation._Fields.ID)
                    || field.equals(ReleaseVulnerabilityRelation._Fields.VERIFICATION_STATE_INFO)){
                continue;
            }
            destination.setFieldValue(field, source.getFieldValue(field));
        }
        return destination;
    }
}
