/*
 * Copyright Siemens AG, 2016. Part of the SW360 Portal Project.
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.sw360.vulnerabilities.db;

import com.ibm.cloud.cloudant.v1.model.DesignDocumentViewsMapReduce;
import org.eclipse.sw360.datahandler.cloudantclient.DatabaseConnectorCloudant;
import org.eclipse.sw360.datahandler.cloudantclient.DatabaseRepositoryCloudantClient;
import org.eclipse.sw360.datahandler.common.CommonUtils;
import org.eclipse.sw360.datahandler.thrift.PaginationData;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.Vulnerability;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.VulnerabilitySortColumn;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * CRUD access for the Vulnerability class
 *
 * @author stefan.jaeger@evosoft.com
 */
public class VulnerabilityRepository extends DatabaseRepositoryCloudantClient<Vulnerability> {

    private static final String ALL =
            "function(doc) {" +
                    "  if (doc.type == 'vulnerability')" +
                    "    emit(null, doc._id) " +
                    "}";

    private static final String BY_EXTERNALID_VIEW =
            "function(doc) {" +
                    "  if (doc.type == 'vulnerability') {" +
                    "    emit(doc.externalId, doc._id);" +
                    "  } " +
                    "}";

    private static final String BY_LAST_UPDATE_VIEW =
            "function(doc) {" +
                    "  if (doc.type == 'vulnerability') {" +
                    "    emit(doc.lastExternalUpdate, doc._id);" +
                    "  } " +
                    "}";

    private static final String BY_VULNERABLE_CONFIGURATION =
            "function(doc) {" +
                    "  if (doc.type == 'vulnerability') {" +
                    "    for(config in doc.vulnerableConfiguration) {" +
                    "      emit(config,doc._id)" +
                    "    }" +
                    "  }" +
                    "}";

    private static final String ALL_EXTERNALIDS =
            "function(doc) {" +
                    "  if (doc.type == 'vulnerability') {" +
                    "    emit(null, doc.externalId);" +
                    "  } " +
                    "}";

    private static final String BY_TITLE_VIEW =
            "function(doc) {" +
                    "  if (doc.type == 'vulnerability') {" +
                    "    emit(doc.title, doc._id);" +
                    "  } " +
                    "}";

    private static final String BY_CVSS_VIEW =
            "function(doc) {" +
                    "  if (doc.type == 'vulnerability') {" +
                    "    emit(doc.cvss, doc._id);" +
                    "  } " +
                    "}";

    private static final String BY_PUBLISH_DATE_VIEW =
            "function(doc) {" +
                    "  if (doc.type == 'vulnerability') {" +
                    "    emit(doc.publishDate, doc._id);" +
                    "  } " +
                    "}";

    public VulnerabilityRepository(DatabaseConnectorCloudant db) {
        super(db, Vulnerability.class);

        Map<String, DesignDocumentViewsMapReduce> views = new HashMap<>();
        views.put("all", createMapReduce(ALL, null));
        views.put("byexternalid", createMapReduce(BY_EXTERNALID_VIEW, null));
        views.put("bylastupdate", createMapReduce(BY_LAST_UPDATE_VIEW, null));
        views.put("byvunerableconfig", createMapReduce(BY_VULNERABLE_CONFIGURATION, null));
        views.put("all_externalids", createMapReduce(ALL_EXTERNALIDS, null));
        views.put("bytitle", createMapReduce(BY_TITLE_VIEW, null));
        views.put("byweighting", createMapReduce(BY_CVSS_VIEW, null));
        views.put("bypublishdate", createMapReduce(BY_PUBLISH_DATE_VIEW, null));
        initStandardDesignDocument(views, db);
    }

    public Vulnerability getVulnerabilityByExternalid(String externalid) {
        final Set<String> idList = queryForIdsAsValue("byexternalid", externalid);
        if (idList != null && !idList.isEmpty())
            return get(CommonUtils.getFirst(idList));
        return null;
    }

    public List<Vulnerability> getVulnerabilitiesByLastUpdate(int limit) {
        Set<String> ids = queryForIdsAsValue(getConnector()
                .getPostViewQueryBuilder(Vulnerability.class, "bylastupdate")
                .descending(true)
                .limit(limit)
                .build());
        return get(ids);
    }

    public List<Vulnerability> getVulnerabilitiesByExternalIdOrVulnerableConfig(String externalId, String vulnerableConfig) {
        Set<String> ids = null;
        if (!CommonUtils.isNullEmptyOrWhitespace(externalId)) {
            ids = getIdsByExternalIds(externalId);
        }
        if (!CommonUtils.isNullEmptyOrWhitespace(vulnerableConfig)) {
            ids = CommonUtils.intersectionIfNotNull(ids, getIdsByVulnerableConfig(vulnerableConfig));
        }
        if (ids != null) {
            return get(ids);
        } else {
            return getAll();
        }
    }

    private Set<String> getIdsByExternalIds(String externalId) {
        return queryForIdsByPrefix("byexternalid", externalId);
    }

    private Set<String> getIdsByVulnerableConfig(String vulnerableConfig) {
        return queryForIdsByPrefix("byvunerableconfig", vulnerableConfig);
    }

    public Set<String> getAllExternalIds() {
        return queryForIdsAsValue(getConnector()
                .getPostViewQueryBuilder(Vulnerability.class, "all_externalids")
                .build());
    }

    public Map<PaginationData, List<Vulnerability>> getVulnerabilitiesByPagination(PaginationData pageData) {
        List<Vulnerability> vulnerabilities = queryViewPaginated(queryViewFromPageData(pageData), pageData, false);
        return Collections.singletonMap(pageData, vulnerabilities);
    }

    private String queryViewFromPageData(PaginationData pageData) {
        final VulnerabilitySortColumn sortBy = VulnerabilitySortColumn.findByValue(pageData.getSortColumnNumber());
        return switch (sortBy) {
            case null -> "byexternalid";
            case VulnerabilitySortColumn.BY_EXTERNALID -> "byexternalid";
            case VulnerabilitySortColumn.BY_TITLE -> "bytitle";
            case VulnerabilitySortColumn.BY_WEIGHTING -> "byweighting";
            case VulnerabilitySortColumn.BY_PUBLISHDATE -> "bypublishdate";
            case VulnerabilitySortColumn.BY_LASTUPDATED -> "bylastupdate";
        };
    }
}
