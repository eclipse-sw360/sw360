/*
 * Copyright Siemens AG, 2016. Part of the SW360 Portal Project.
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.sw360.vulnerabilities.db;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.ibm.cloud.cloudant.v1.model.DesignDocumentViewsMapReduce;
import com.ibm.cloud.cloudant.v1.model.PostFindOptions;
import org.eclipse.sw360.datahandler.cloudantclient.DatabaseConnectorCloudant;
import org.eclipse.sw360.datahandler.cloudantclient.DatabaseRepositoryCloudantClient;
import org.eclipse.sw360.datahandler.common.CommonUtils;
import org.eclipse.sw360.datahandler.thrift.PaginationData;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.Vulnerability;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.VulnerabilitySortColumn;
import org.jetbrains.annotations.NotNull;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import static org.eclipse.sw360.datahandler.cloudantclient.DatabaseConnectorCloudant.eq;

/**
 * CRUD access for the Vulnerability class
 *
 * @author stefan.jaeger@evosoft.com
 */
public class VulnerabilityRepository extends DatabaseRepositoryCloudantClient<Vulnerability> {

    private static final String ALL =
            "function(doc) {" +
                    "  if (doc.type == 'vulnerability')" +
                    "    emit(null, doc._id) " +
                    "}";

    private static final String BY_EXTERNALID_VIEW =
            "function(doc) {" +
                    "  if (doc.type == 'vulnerability') {" +
                    "    emit(doc.externalId, doc._id);" +
                    "  } " +
                    "}";

    private static final String BY_LAST_UPDATE_VIEW =
            "function(doc) {" +
                    "  if (doc.type == 'vulnerability') {" +
                    "    emit(doc.lastExternalUpdate, doc._id);" +
                    "  } " +
                    "}";

    private static final String BY_VULNERABLE_CONFIGURATION =
            "function(doc) {" +
                    "  if (doc.type == 'vulnerability') {" +
                    "    for(config in doc.vulnerableConfiguration) {" +
                    "      emit(config,doc._id)" +
                    "    }" +
                    "  }" +
                    "}";

    private static final String ALL_EXTERNALIDS =
            "function(doc) {" +
                    "  if (doc.type == 'vulnerability') {" +
                    "    emit(null, doc.externalId);" +
                    "  } " +
                    "}";

    public VulnerabilityRepository(DatabaseConnectorCloudant db) {
        super(db, Vulnerability.class);

        Map<String, DesignDocumentViewsMapReduce> views = new HashMap<>();
        views.put("all", createMapReduce(ALL, null));
        views.put("byexternalid", createMapReduce(BY_EXTERNALID_VIEW, null));
        views.put("bylastupdate", createMapReduce(BY_LAST_UPDATE_VIEW, null));
        views.put("byvunerableconfig", createMapReduce(BY_VULNERABLE_CONFIGURATION, null));
        views.put("all_externalids", createMapReduce(ALL_EXTERNALIDS, null));
        initStandardDesignDocument(views, db);

        createIndex("byexternalid", new String[] {Vulnerability._Fields.EXTERNAL_ID.getFieldName()}, db);
        createIndex("bytitle", new String[] {Vulnerability._Fields.TITLE.getFieldName()}, db);
        createIndex("byweighting", new String[] {Vulnerability._Fields.CVSS.getFieldName()}, db);
        createIndex("bypublishdate", new String[] {Vulnerability._Fields.PUBLISH_DATE.getFieldName()}, db);
        createIndex("bylastupdated", new String[] {Vulnerability._Fields.LAST_UPDATE_DATE.getFieldName()}, db);
    }

    public Vulnerability getVulnerabilityByExternalid(String externalid) {
        final Set<String> idList = queryForIdsAsValue("byexternalid", externalid);
        if (idList != null && !idList.isEmpty())
            return get(CommonUtils.getFirst(idList));
        return null;
    }

    public List<Vulnerability> getVulnerabilitiesByLastUpdate(int limit) {
        Set<String> ids = queryForIdsAsValue(getConnector()
                .getPostViewQueryBuilder(Vulnerability.class, "bylastupdate")
                .descending(true)
                .limit(limit)
                .build());
        return get(ids);
    }

    public List<Vulnerability> getVulnerabilitiesByExternalIdOrVulnerableConfig(String externalId, String vulnerableConfig) {
        Set<String> ids = null;
        if (!CommonUtils.isNullEmptyOrWhitespace(externalId)) {
            ids = getIdsByExternalIds(externalId);
        }
        if (!CommonUtils.isNullEmptyOrWhitespace(vulnerableConfig)) {
            ids = CommonUtils.intersectionIfNotNull(ids, getIdsByVulnerableConfig(vulnerableConfig));
        }
        if (ids != null) {
            return get(ids);
        } else {
            return getAll();
        }
    }

    private Set<String> getIdsByExternalIds(String externalId) {
        return queryForIdsByPrefix("byexternalid", externalId);
    }

    private Set<String> getIdsByVulnerableConfig(String vulnerableConfig) {
        return queryForIdsByPrefix("byvunerableconfig", vulnerableConfig);
    }

    public Set<String> getAllExternalIds() {
        return queryForIdsAsValue(getConnector()
                .getPostViewQueryBuilder(Vulnerability.class, "all_externalids")
                .build());
    }

    public Map<PaginationData, List<Vulnerability>> getVulnerabilitiesByPagination(PaginationData pageData) {
        Map<PaginationData, List<Vulnerability>> paginatedVulnerabilities = queryViewWithPagination(pageData);
        List<Vulnerability> userList = paginatedVulnerabilities.values().iterator().next();
        paginatedVulnerabilities.put(pageData, userList);
        return paginatedVulnerabilities;
    }

    private Map<PaginationData, List<Vulnerability>> queryViewWithPagination(PaginationData pageData) {
        final VulnerabilitySortColumn sortBy = VulnerabilitySortColumn.findByValue(pageData.getSortColumnNumber());
        final Map<String, String> sortSelector = getSortSelector(pageData);
        List<Vulnerability> vulnerabilities = Lists.newArrayList();
        Map<PaginationData, List<Vulnerability>> result = Maps.newHashMap();

        final Map<String, Object> typeSelector = eq("type", "vulnerability");

        PostFindOptions.Builder qb = getConnector().getQueryBuilder()
                .selector(typeSelector);

        switch (sortBy) {
            case null:
            case VulnerabilitySortColumn.BY_EXTERNALID:
                qb.useIndex(Collections.singletonList("byexternalid"));
                break;
            case VulnerabilitySortColumn.BY_TITLE:
                qb.useIndex(Collections.singletonList("bytitle"));
                break;
            case VulnerabilitySortColumn.BY_WEIGHTING:
                qb.useIndex(Collections.singletonList("byweighting"));
                break;
            case VulnerabilitySortColumn.BY_PUBLISHDATE:
                qb.useIndex(Collections.singletonList("bypublishdate"));
                break;
            case VulnerabilitySortColumn.BY_LASTUPDATED:
                qb.useIndex(Collections.singletonList("bylastupdated"));
                break;
            default:
                break;
        }

        try {
            vulnerabilities = getConnector().getQueryResultPaginated(qb, Vulnerability.class, pageData, sortSelector);
        } catch (Exception e) {
            log.error("Error getting vulnerabilities", e);
        }
        result.put(pageData, vulnerabilities);
        return result;
    }

    private static @NotNull Map<String, String> getSortSelector(PaginationData pageData) {
        boolean ascending = pageData.isAscending();
        return switch (VulnerabilitySortColumn.findByValue(pageData.getSortColumnNumber())) {
            case VulnerabilitySortColumn.BY_TITLE ->
                    Collections.singletonMap("title", ascending ? "asc" : "desc");
            case VulnerabilitySortColumn.BY_WEIGHTING ->
                    Collections.singletonMap("cvss", ascending ? "asc" : "desc");
            case VulnerabilitySortColumn.BY_PUBLISHDATE ->
                    Collections.singletonMap("publishDate", ascending ? "asc" : "desc");
            case VulnerabilitySortColumn.BY_LASTUPDATED ->
                    Collections.singletonMap("lastUpdateDate", ascending ? "asc" : "desc");
            case null, default ->
                    Collections.singletonMap("externalId", ascending ? "asc" : "desc"); // Default sort by externalId
        };
    }
}
