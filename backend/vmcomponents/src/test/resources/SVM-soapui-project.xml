<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ SPDX-FileCopyrightText: Â© 2022 Siemens AG
  ~ SPDX-License-Identifier: EPL-2.0
-->
<con:soapui-project id="2ce98f8d-b177-4026-843b-b0c8c73f98f1" activeEnvironment="Default" name="SVM" resourceRoot="" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="81d5baae-e38b-4973-9f79-41127f8bc4a8" port="8090" path="/portal/api/v1/public" host="localhost" name="REST MockService ComponentIDs" docroot=""><con:settings/><con:properties/><con:restMockAction name="/components" method="GET" resourcePath="/components" id="c56e7745-e0e2-45b9-a9ba-90efdbd1bf22"><con:settings/><con:defaultResponse>Sample List</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Sample List" id="b15c2152-c781-4d06-85d1-7b33a1ac78e5" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[
  1,
  2,
  3,
  5,
  6,
  7,
  10,
  70,
  20172,
  20173
]</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/components/70" method="GET" resourcePath="/components/70" id="36e5d3bf-f279-49fe-8fcf-ec7b1838c6e0"><con:settings/><con:defaultResponse>70 Apache Tomcat</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="70 Apache Tomcat" id="ad0276ae-0c36-4637-944c-4c32ed0234f2" httpResponseStatus="200"><con:settings/><con:responseContent>{
  "vendor":         "Apache Software Foundation",
  "component_name": "Tomcat",
  "version":        "3.2.1",
  "url":            "http://tomcat.apache.org/",
  "security_url":   null,
  "eol_reached":    true,
  "cpe_name":       "cpe:/a:apache:tomcat:3.2.1",
  "minimum_patch_levels": {
    "priority_1": null,
    "priority_2": "6.0.36",
    "priority_3": null
  }
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/components/70/notifications" method="GET" resourcePath="/components/70/notifications" id="24c28867-1e77-4a69-9610-51730c6e2797"><con:settings/><con:defaultResponse>70 Notifications</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="70 Notifications" id="8a316d4f-cc37-43f2-9ffc-eaca246a1cf4" httpResponseStatus="200"><con:settings/><con:responseContent>[
  {
    "id": "19936",
    "publish_date": "2012-12-03T18:27:06Z",
    "last_update":  "2013-11-12T12:22:25Z"
  },
  {
    "id": "20705",
    "publish_date": "2013-03-18T11:35:04Z",
    "last_update":  "2014-01-07T13:57:52Z"
  },
 
  {
    "id": "22955",
    "publish_date": "2014-02-04T08:11:23Z",
    "last_update":  null
  }
]</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/notifications/22955" method="GET" resourcePath="/notifications/22955" id="c98fc102-0bf3-4e31-b884-dda534087031"><con:settings/><con:defaultResponse>22955 RedHat Not</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="22955 RedHat Not" id="eb4b6310-f24c-449e-9bc0-08147bfdeb6a" httpResponseStatus="200"><con:settings/><con:responseContent>{
  "title":        "Red Hat RHEL 5, 6 - java-1.6.0-openjdk Multiple Vulnerabilities - RHSA-2014:0097-1",
  "description":  "These packages provide the OpenJDK 6 Java Runtime Environment and the OpenJDK 6 Java Software Development Kit. An input validation flaw was discovered in the font layout engine in the 2D component. A specially crafted font file could trigger a Java Virtual Machine memory corruption when processed. An untrusted Java application or applet could possibly use this flaw to bypass Java sandbox restrictions. (CVE-2013-5907) Multiple improper permission check issues were discovered in the CORBA and JNDI components in OpenJDK. An untrusted Java application or applet could use these flaws to bypass Java sandbox restrictions. (CVE-2014-0428, CVE-2014-0422) Multiple improper permission check issues were discovered in the Serviceability, Security, CORBA, JAAS, JAXP, and Networking components in OpenJDK. An untrusted Java application or applet could use these flaws to bypass certain Java sandbox restrictions. (CVE-2014-0373, CVE-2013-5878, CVE-2013-5910, CVE-2013-5896, CVE-2013-5884, CVE-2014-0416, CVE-2014-0376, CVE-2014-0368) It was discovered that the Beans component did not restrict processing of XML external entities. This flaw could cause a Java application using Beans to leak sensitive information, or affect application availability. (CVE-2014-0423) It was discovered that the JSSE component could leak timing information during the TLS/SSL handshake. This could possibly lead to a disclosure of information about the used encryption keys. (CVE-2014-0411) Vendor Affected Components: Red Hat Enterprise Linux (v. 5 server) Red Hat Enterprise Linux Desktop (v. 5 client) Red Hat Enterprise Linux Desktop (v. 6) Red Hat Enterprise Linux HPC Node (v. 6) Red Hat Enterprise Linux Server (v. 6) Red Hat Enterprise Linux Server AUS (v. 6.5) Red Hat Enterprise Linux Server EUS (v. 6.5.z) Red Hat Enterprise Linux Workstation (v. 6)",
  "publish_date": "2014-01-28T11:22:20Z",
  "last_update":  "2014-02-03T14:36:15Z",
  "priority":     2,
  "action":       5,
  "impact":       "Security Bypass, Exposure of Sensitive Information, Denial of Service (DoS)",
  "assigned_components": [
    1928,
    3985,
    4175,
    4353,
    6727,
    8429,
    8751,
    8953,
    9482,
    9484,
    10185,
    10186,
    12572,
    12582,
    14899,
    15168,
    15506,
    16682,
    16865,
    17676,
    17939,
    19544,
    19683
  ],
  "vendor_advisories": [
    {
      "name":   "RHSA-2014:0097-1",
      "url":    "http://rhn.redhat.com/errata/RHSA-2014-0097.html",
      "vendor": "Red Hat"
    }
  ],
  "solution_details":     "Updated packages are available via the Red Hat Network: http://rhn.redhat.com",
  "legal_notice":         "Automatically generated by Siemens ProductCERT (svm.ct@siemens.com), Thu, 06 Feb 2014 08:55:42 UTC. Â© Siemens AG. Restricted.",
  "extended_description": null,
  "cve_references": [
    {
      "year":   2013,
      "number": 5878
    },
    {
      "year":   2013,
      "number": 5884
    },
    {
      "year":   2013,
      "number": 5896
    },
    {
      "year":   2013,
      "number": 5907
    },
    {
      "year":   2013,
      "number": 5910
    },
    {
      "year":   2014,
      "number": 368
    },
    {
      "year":   2014,
      "number": 373
    },
    {
      "year":   2014,
      "number": 376
    },
    {
      "year":   2014,
      "number": 411
    },
    {
      "year":   2014,
      "number": 416
    },
    {
      "year":   2014,
      "number": 422
    },
    {
      "year":   2014,
      "number": 423
    },
    {
      "year":   2014,
      "number": 428
    }
  ],
  "cvss_v2_metrics": {
    "base_score":     "6.8",
    "temporal_score": "5.0",
    "overall_score":  "5.0",
    "vector":         "(AV:N/AC:M/Au:N/C:P/I:P/A:P/E:U/RL:OF/RC:C)"
  },
  "related_notifications": [ ],
  "references": [
    "http://rhn.redhat.com/errata/RHSA-2014-0097.html",
    "http://secunia.com/advisories/56667",
    "http://www.linuxsecurity.com/content/view/160833",
    "https://www.cert.be/pro/advisories/red-hat-update-java-160-openjdk-16"
  ],
  "update_history": [
    {
      "date":             "2014-01-29T07:28:24Z",
      "description":      "Added reference(s)",
      "important_update": false
    },
    {
      "date":             "2014-01-29T07:35:57Z",
      "description":      "Added reference(s)",
      "important_update": false
    },
    {
      "date":             "2014-02-03T14:36:15Z",
      "description":      "Added reference(s)",
      "important_update": false
    }
  ]
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/priorities/2" method="GET" resourcePath="/priorities/2" id="2251df5f-47b7-426d-aec3-4cb96f18be11"><con:settings/><con:defaultResponse>prio 2</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="prio 2" id="fa541231-050a-4ebd-ac2a-f2853b7f8064" httpResponseStatus="200"><con:settings/><con:responseContent>{
  "short_text": "major",
  "long_text":  "Typically used for remote or local attacks with significant impact but no full compromise of system. Investigate as soon as possible and follow recommended action."
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/actions/5" method="GET" resourcePath="/actions/5" id="69b89f6c-6aef-4d0b-b31e-7674373195fd"><con:settings/><con:defaultResponse>action 5</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="action 5" id="13056289-5b09-4755-9a2a-b593b06e3c94" httpResponseStatus="200"><con:settings/><con:responseContent>{
  "text": "Install New Package"
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/priorities" method="GET" resourcePath="/priorities" id="30a62b50-712e-4664-8ede-300532b20c08"><con:settings/><con:defaultResponse>all</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="all" id="d1aeec72-2b92-40af-bb4f-93ff96d9a890" httpResponseStatus="200"><con:settings/><con:responseContent>[
  1,
  2,
  3,
  4,
  5
]</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/actions" method="GET" resourcePath="/actions" id="aff47caa-cbd5-41f5-aa69-69b84d0622ad"><con:settings/><con:defaultResponse>all</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="all" id="5ead9bfa-a6fc-446c-8e3d-2a2856f49acb" httpResponseStatus="200"><con:settings/><con:responseContent>[
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9
]</con:responseContent></con:response><con:response name="only 5" id="cb2283a9-92bd-4fb6-9b1c-fe3e4edb03b2" httpResponseStatus="200"><con:settings/><con:responseContent>[
  5
]</con:responseContent></con:response><con:response name="/priorities/1" id="8a1c2908-68dc-47e5-9bd0-f7252e24efe6" httpResponseStatus="200"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/notifications/20705" method="GET" resourcePath="/notifications/20705" id="0edafd68-2f48-4302-a204-ec5fa84ae0f1"><con:settings/><con:defaultResponse>20705</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="20705" id="06725ac6-87ce-4b4f-aada-a0dbde1c3fd6" httpResponseStatus="200"><con:settings/><con:responseContent>{
  "title":        "Red Hat RHEL 5, 6 - java-1.6.0-openjdk Multiple Vulnerabilities - RHSA-2014:0097-1",
  "description":  "These packages provide the OpenJDK 6 Java Runtime Environment and the OpenJDK 6 Java Software Development Kit. An input validation flaw was discovered in the font layout engine in the 2D component. A specially crafted font file could trigger a Java Virtual Machine memory corruption when processed. An untrusted Java application or applet could possibly use this flaw to bypass Java sandbox restrictions. (CVE-2013-5907) Multiple improper permission check issues were discovered in the CORBA and JNDI components in OpenJDK. An untrusted Java application or applet could use these flaws to bypass Java sandbox restrictions. (CVE-2014-0428, CVE-2014-0422) Multiple improper permission check issues were discovered in the Serviceability, Security, CORBA, JAAS, JAXP, and Networking components in OpenJDK. An untrusted Java application or applet could use these flaws to bypass certain Java sandbox restrictions. (CVE-2014-0373, CVE-2013-5878, CVE-2013-5910, CVE-2013-5896, CVE-2013-5884, CVE-2014-0416, CVE-2014-0376, CVE-2014-0368) It was discovered that the Beans component did not restrict processing of XML external entities. This flaw could cause a Java application using Beans to leak sensitive information, or affect application availability. (CVE-2014-0423) It was discovered that the JSSE component could leak timing information during the TLS/SSL handshake. This could possibly lead to a disclosure of information about the used encryption keys. (CVE-2014-0411) Vendor Affected Components: Red Hat Enterprise Linux (v. 5 server) Red Hat Enterprise Linux Desktop (v. 5 client) Red Hat Enterprise Linux Desktop (v. 6) Red Hat Enterprise Linux HPC Node (v. 6) Red Hat Enterprise Linux Server (v. 6) Red Hat Enterprise Linux Server AUS (v. 6.5) Red Hat Enterprise Linux Server EUS (v. 6.5.z) Red Hat Enterprise Linux Workstation (v. 6)",
  "publish_date": "2014-01-27T11:22:20Z",
  "last_update":  "2014-02-03T14:36:15Z",
  "priority":     1,
  "action":       4,
  "impact":       "Security Bypass, Exposure of Sensitive Information, Denial of Service (DoS)",
  "assigned_components": [
    1928,
    3985,
    4175,
    4353,
    6727,
    8429,
    8751,
    8953,
    9482,
    9484,
    10185,
    10186,
    12572,
    12582,
    14899,
    15168,
    15506,
    16682,
    16865,
    17676,
    17939,
    19544,
    19683
  ],
  "vendor_advisories": [
    {
      "name":   "RHSA-2014:0097-1",
      "url":    "http://rhn.redhat.com/errata/RHSA-2014-0097.html",
      "vendor": "Red Hat"
    }
  ],
  "solution_details":     "Updated packages are available via the Red Hat Network: http://rhn.redhat.com",
  "legal_notice":         "Automatically generated by Siemens ProductCERT (svm.ct@siemens.com), Thu, 06 Feb 2014 08:55:42 UTC. Â© Siemens AG. Restricted.",
  "extended_description": null,
  "cve_references": [
    {
      "year":   2013,
      "number": 5878
    },
    {
      "year":   2013,
      "number": 5884
    },
    {
      "year":   2013,
      "number": 5896
    },
    {
      "year":   2013,
      "number": 5907
    },
    {
      "year":   2013,
      "number": 5910
    },
    {
      "year":   2014,
      "number": 368
    },
    {
      "year":   2014,
      "number": 373
    },
    {
      "year":   2014,
      "number": 376
    },
    {
      "year":   2014,
      "number": 411
    },
    {
      "year":   2014,
      "number": 416
    },
    {
      "year":   2014,
      "number": 422
    },
    {
      "year":   2014,
      "number": 423
    },
    {
      "year":   2014,
      "number": 428
    }
  ],
  "cvss_v2_metrics": {
    "base_score":     "6.8",
    "temporal_score": "5.0",
    "overall_score":  "5.0",
    "vector":         "(AV:N/AC:M/Au:N/C:P/I:P/A:P/E:U/RL:OF/RC:C)"
  },
  "related_notifications": [ ],
  "references": [
    "http://rhn.redhat.com/errata/RHSA-2014-0097.html",
    "http://secunia.com/advisories/56667",
    "http://www.linuxsecurity.com/content/view/160833",
    "https://www.cert.be/pro/advisories/red-hat-update-java-160-openjdk-16"
  ],
  "update_history": [
    {
      "date":             "2014-01-29T07:28:24Z",
      "description":      "Added reference(s)",
      "important_update": false
    },
    {
      "date":             "2014-01-29T07:35:57Z",
      "description":      "Added reference(s)",
      "important_update": false
    },
    {
      "date":             "2014-02-03T14:36:15Z",
      "description":      "Added reference(s)",
      "important_update": false
    }
  ]
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/notifications/19936" method="GET" resourcePath="/notifications/19936" id="ec61fa33-0f8e-4887-9d34-880eaa8bf3ae"><con:settings/><con:defaultResponse>19936</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="19936" id="d1482395-56a5-4bf8-a987-1b6ea6acfd5a" httpResponseStatus="200"><con:settings/><con:responseContent>{
  "title":        "Red Hat RHEL 5, 6 - java-1.6.0-openjdk Multiple Vulnerabilities - RHSA-2014:0097-1",
  "description":  "These packages provide the OpenJDK 6 Java Runtime Environment and the OpenJDK 6 Java Software Development Kit. An input validation flaw was discovered in the font layout engine in the 2D component. A specially crafted font file could trigger a Java Virtual Machine memory corruption when processed. An untrusted Java application or applet could possibly use this flaw to bypass Java sandbox restrictions. (CVE-2013-5907) Multiple improper permission check issues were discovered in the CORBA and JNDI components in OpenJDK. An untrusted Java application or applet could use these flaws to bypass Java sandbox restrictions. (CVE-2014-0428, CVE-2014-0422) Multiple improper permission check issues were discovered in the Serviceability, Security, CORBA, JAAS, JAXP, and Networking components in OpenJDK. An untrusted Java application or applet could use these flaws to bypass certain Java sandbox restrictions. (CVE-2014-0373, CVE-2013-5878, CVE-2013-5910, CVE-2013-5896, CVE-2013-5884, CVE-2014-0416, CVE-2014-0376, CVE-2014-0368) It was discovered that the Beans component did not restrict processing of XML external entities. This flaw could cause a Java application using Beans to leak sensitive information, or affect application availability. (CVE-2014-0423) It was discovered that the JSSE component could leak timing information during the TLS/SSL handshake. This could possibly lead to a disclosure of information about the used encryption keys. (CVE-2014-0411) Vendor Affected Components: Red Hat Enterprise Linux (v. 5 server) Red Hat Enterprise Linux Desktop (v. 5 client) Red Hat Enterprise Linux Desktop (v. 6) Red Hat Enterprise Linux HPC Node (v. 6) Red Hat Enterprise Linux Server (v. 6) Red Hat Enterprise Linux Server AUS (v. 6.5) Red Hat Enterprise Linux Server EUS (v. 6.5.z) Red Hat Enterprise Linux Workstation (v. 6)",
  "publish_date": "2014-01-27T10:22:20Z",
  "last_update":  "2014-02-03T14:36:15Z",
  "priority":     1,
  "action":       5,
  "impact":       "Security Bypass, Exposure of Sensitive Information, Denial of Service (DoS)",
  "assigned_components": [
    1928,
    3985,
    4175,
    4353,
    6727,
    8429,
    8751,
    8953,
    9482,
    9484,
    10185,
    10186,
    12572,
    12582,
    14899,
    15168,
    15506,
    16682,
    16865,
    17676,
    17939,
    19544,
    19683
  ],
  "vendor_advisories": [
    {
      "name":   "RHSA-2014:0097-1",
      "url":    "http://rhn.redhat.com/errata/RHSA-2014-0097.html",
      "vendor": "Red Hat"
    }
  ],
  "solution_details":     "Updated packages are available via the Red Hat Network: http://rhn.redhat.com",
  "legal_notice":         "Automatically generated by Siemens ProductCERT (svm.ct@siemens.com), Thu, 06 Feb 2014 08:55:42 UTC. Â© Siemens AG. Restricted.",
  "extended_description": null,
  "cve_references": [
    {
      "year":   2013,
      "number": 5878
    },
    {
      "year":   2013,
      "number": 5884
    },
    {
      "year":   2013,
      "number": 5896
    },
    {
      "year":   2013,
      "number": 5907
    },
    {
      "year":   2013,
      "number": 5910
    },
    {
      "year":   2014,
      "number": 368
    },
    {
      "year":   2014,
      "number": 373
    },
    {
      "year":   2014,
      "number": 376
    },
    {
      "year":   2014,
      "number": 411
    },
    {
      "year":   2014,
      "number": 416
    },
    {
      "year":   2014,
      "number": 422
    },
    {
      "year":   2014,
      "number": 423
    },
    {
      "year":   2014,
      "number": 428
    }
  ],
  "cvss_v2_metrics": {
    "base_score":     "6.8",
    "temporal_score": "5.0",
    "overall_score":  "5.0",
    "vector":         "(AV:N/AC:M/Au:N/C:P/I:P/A:P/E:U/RL:OF/RC:C)"
  },
  "related_notifications": [ ],
  "references": [
    "http://rhn.redhat.com/errata/RHSA-2014-0097.html",
    "http://secunia.com/advisories/56667",
    "http://www.linuxsecurity.com/content/view/160833",
    "https://www.cert.be/pro/advisories/red-hat-update-java-160-openjdk-16"
  ],
  "update_history": [
    {
      "date":             "2014-01-29T07:28:24Z",
      "description":      "Added reference(s)",
      "important_update": false
    },
    {
      "date":             "2014-01-29T07:35:57Z",
      "description":      "Added reference(s)",
      "important_update": false
    },
    {
      "date":             "2014-02-03T14:36:15Z",
      "description":      "Added reference(s)",
      "important_update": false
    }
  ]
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/priorities/1" method="GET" resourcePath="/priorities/1" id="f7a85347-276d-43d0-89ea-37090782c71f"><con:settings/><con:defaultResponse>prio 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="prio 1" id="12a19bd8-1519-482f-ad01-7a84054030b1" httpResponseStatus="200"><con:settings/><con:responseContent>{
	"short_text":"critical",
	"long_text":"Typically used for remote attacks with critical impact which cause full compromise of the system. Investigate immediately and follow recommended action as soon as possible with urgency."
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/actions/4" method="GET" resourcePath="/actions/4" id="1366c132-55ae-439f-a420-290e7296daec"><con:settings/><con:defaultResponse>action 4</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="action 4" id="fa47e3c4-b9ac-4f57-b1c0-aaced7edc132" httpResponseStatus="200"><con:settings/><con:responseContent>{"text":"Read / Follow Recommendation"}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>