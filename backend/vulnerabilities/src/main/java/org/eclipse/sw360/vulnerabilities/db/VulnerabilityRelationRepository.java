/*
 * Copyright Siemens AG, 2016. Part of the SW360 Portal Project.
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.sw360.vulnerabilities.db;

import org.eclipse.sw360.datahandler.common.CommonUtils;
import org.eclipse.sw360.datahandler.couchdb.DatabaseConnector;
import org.eclipse.sw360.datahandler.couchdb.DatabaseRepository;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.ReleaseVulnerabilityRelation;
import org.ektorp.support.View;

import java.util.Collection;
import java.util.List;
import java.util.Set;

/**
 * CRUD access for the ReleaseVulnerabilityRelation class
 *
 * @author stefan.jaeger@evosoft.com
 */
@View(name = "all", map = "function(doc) { if (doc.type == 'releasevulnerabilityrelation') emit(null, doc._id) }")
public class VulnerabilityRelationRepository extends DatabaseRepository<ReleaseVulnerabilityRelation> {

    private static final String BY_IDs_VIEW =
            "function(doc) {" +
                    "  if (doc.type == 'releasevulnerabilityrelation') {" +
                    "    emit([doc.releaseId, doc.vulnerabilityId], null);" +
                    "  } " +
                    "}";

    private static final String BY_RELEASE_ID_VIEW =
            "function(doc) {" +
                    "  if (doc.type == 'releasevulnerabilityrelation') {" +
                    "    emit(doc.releaseId, null);" +
                    "  } " +
                    "}";

    private static final String BY_VULNERABILITY_ID_VIEW =
            "function(doc) {" +
                    "  if (doc.type == 'releasevulnerabilityrelation') {" +
                    "    emit(doc.vulnerabilityId, null);" +
                    "  } " +
                    "}";

    public VulnerabilityRelationRepository(DatabaseConnector db) {
        super(ReleaseVulnerabilityRelation.class, db);

        initStandardDesignDocument();
    }

    @View(name = "byids", map = BY_IDs_VIEW)
    public ReleaseVulnerabilityRelation getRelationByIds(String releaseId, String vulnerabilityId) {
        final Set<String> idList = queryForIdsAsComplexValue("byids", releaseId, vulnerabilityId);
        if (idList != null && idList.size() > 0)
            return get(CommonUtils.getFirst(idList));
        return null;
    }

    @View(name = "byReleaseId", map = BY_RELEASE_ID_VIEW)
    public List<ReleaseVulnerabilityRelation> getRelationsByReleaseIds(Collection<String> releaseIds) {
        return queryByIds("byReleaseId", releaseIds);
    }

    @View(name = "byVulnerabilityId", map = BY_VULNERABILITY_ID_VIEW)
    public List<ReleaseVulnerabilityRelation> getRelationsByVulnerabilityId(String vulnerabilityId) {
        return queryView("byVulnerabilityId", vulnerabilityId);
    }
}
