/*
 * Copyright Siemens AG, 2016. Part of the SW360 Portal Project.
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.sw360.vulnerabilities.db;

import org.eclipse.sw360.datahandler.common.CommonUtils;
import org.eclipse.sw360.datahandler.couchdb.DatabaseConnector;
import org.eclipse.sw360.datahandler.couchdb.DatabaseRepository;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.Vulnerability;
import org.ektorp.support.View;

import java.util.List;
import java.util.Set;

/**
 * CRUD access for the Vulnerability class
 *
 * @author stefan.jaeger@evosoft.com
 */
@View(name = "all", map = "function(doc) { if (doc.type == 'vulnerability') emit(null, doc._id) }")
public class VulnerabilityRepository extends DatabaseRepository<Vulnerability> {

    private static final String BY_EXTERNALID_VIEW =
            "function(doc) {" +
                    "  if (doc.type == 'vulnerability') {" +
                    "    emit(doc.externalId, doc._id);" +
                    "  } " +
                    "}";

    private static final String BY_LAST_UPDATE_VIEW =
            "function(doc) {" +
                    "  if (doc.type == 'vulnerability') {" +
                    "    emit(doc.lastExternalUpdate, doc._id);" +
                    "  } " +
                    "}";

    private static final String BY_VULNERABLE_CONFIGURATION =
            "function(doc) {" +
                    "  if (doc.type == 'vulnerability') {" +
                    "    for(config in doc.vulnerableConfiguration) {" +
                    "      emit(config,doc._id)" +
                    "    }" +
                    "  }" +
                    "}";

    private static final String ALL_EXTERNALIDS =
            "function(doc) {" +
                    "  if (doc.type == 'vulnerability') {" +
                    "    emit(null, doc.externalId);" +
                    "  } " +
                    "}";

    public VulnerabilityRepository(DatabaseConnector db) {
        super(Vulnerability.class, db);

        initStandardDesignDocument();
    }

    @View(name = "byexternalid", map = BY_EXTERNALID_VIEW)
    public Vulnerability getVulnerabilityByExternalid(String externalid) {
        final Set<String> idList = queryForIdsAsValue("byexternalid", externalid);
        if (idList != null && idList.size() > 0)
            return get(CommonUtils.getFirst(idList));
        return null;
    }

    @View(name = "bylastupdate", map = BY_LAST_UPDATE_VIEW)
    public List<Vulnerability> getVulnerabilitiesByLastUpdate(int limit) {
        List<String> ids = getIdListByView("bylastupdate", true, limit);
        return get(ids);
    }

    public List<Vulnerability> getVulnerabilitiesByExternalIdOrVulnerableConfig(String externalId, String vulnerableConfig) {
        Set<String> ids = null;
        if (!CommonUtils.isNullEmptyOrWhitespace(externalId)) {
            ids = getIdsByExternalIds(externalId);
        }
        if (!CommonUtils.isNullEmptyOrWhitespace(vulnerableConfig)) {
            ids = CommonUtils.intersectionIfNotNull(ids, getIdsByVulnerableConfig(vulnerableConfig));
        }
        if (ids != null) {
            return get(ids);
        } else {
            return getAll();
        }
    }

    @View(name = "byexternalid", map = BY_EXTERNALID_VIEW)
    private Set<String> getIdsByExternalIds(String externalId) {
        return queryForIdsByPrefix("byexternalid", externalId);
    }

    @View(name = "byvunerableconfig", map = BY_VULNERABLE_CONFIGURATION)
    private Set<String> getIdsByVulnerableConfig(String vulnerableConfig) {
        return queryForIdsByPrefix("byvunerableconfig", vulnerableConfig);
    }

    @View(name = "all_externalids", map = ALL_EXTERNALIDS)
    public Set<String> getAllExternalIds() {
        return queryForIdsAsValue(createQuery("all_externalids"));
    }
}
