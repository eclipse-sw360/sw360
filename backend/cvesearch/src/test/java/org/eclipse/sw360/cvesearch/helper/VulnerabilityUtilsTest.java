/*
 * Copyright (c) Bosch Software Innovations GmbH 2016.
 * Part of the SW360 Portal Project.
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.sw360.cvesearch.helper;

import org.eclipse.sw360.datahandler.thrift.RequestStatus;
import org.eclipse.sw360.datahandler.thrift.cvesearch.UpdateType;
import org.eclipse.sw360.datahandler.thrift.cvesearch.VulnerabilityUpdateStatus;

import static org.eclipse.sw360.cvesearch.helper.VulnerabilityUtils.*;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.Matchers.containsInAnyOrder;

import org.eclipse.sw360.datahandler.thrift.vulnerabilities.Vulnerability;
import org.junit.Before;
import org.junit.Test;

import java.util.*;

import static org.junit.Assert.*;

/**
 * @author: birgit.heydenreich@tngtech.com
 */
public class VulnerabilityUtilsTest {
    VulnerabilityUpdateStatus vus1, vus2, vus3, emptyVus;
    Map<UpdateType, List<Vulnerability>> updateMap, failedUpdateMap;

    @Before
    public void setUp() throws Exception {
        emptyVus = getEmptyVulnerabilityUpdateStatus(RequestStatus.SUCCESS);
        vus1 = getEmptyVulnerabilityUpdateStatus(RequestStatus.SUCCESS);
        for (UpdateType updateType : UpdateType.values()) {
            vus1.statusToVulnerabilityIds.get(updateType).addAll(Arrays.asList("id0", "id1", "id2"));
        }
        vus2 = getEmptyVulnerabilityUpdateStatus(RequestStatus.SUCCESS);
        for (UpdateType updateType : UpdateType.values()) {
            vus2.statusToVulnerabilityIds.get(updateType).addAll(Arrays.asList("id3", "id4", "id5"));
        }
        vus3 = getEmptyVulnerabilityUpdateStatus(RequestStatus.FAILURE);
        for (UpdateType updateType : UpdateType.values()) {
            vus3.statusToVulnerabilityIds.get(updateType).addAll(Arrays.asList("id6", "id7", "id8"));
        }
        List<Vulnerability> nlist = Arrays.asList(
                new Vulnerability().setId("n1").setExternalId("ne1"),
                new Vulnerability().setId("n2").setExternalId("ne2"));
        List<Vulnerability> ulist = Arrays.asList(
                new Vulnerability().setId("u1").setExternalId("ue1"),
                new Vulnerability().setId("u2").setExternalId("ue2"),
                new Vulnerability().setId("u3").setExternalId("ue3"));
        List<Vulnerability> olist = Arrays.asList(
                new Vulnerability().setId("o1").setExternalId("oe1"),
                new Vulnerability().setId("o2").setExternalId("oe2"),
                new Vulnerability().setId("o3").setExternalId("oe3"));
        List<Vulnerability> flist = Arrays.asList(
                new Vulnerability().setId("f1").setExternalId("fe1"),
                new Vulnerability().setId("f2").setExternalId("fe2"),
                new Vulnerability().setId("f3").setExternalId("fe3"));
        updateMap = new HashMap<>();
        updateMap.put(UpdateType.NEW, nlist);
        updateMap.put(UpdateType.UPDATED, ulist);
        failedUpdateMap = new HashMap<>();
        failedUpdateMap.put(UpdateType.NEW, nlist);
        failedUpdateMap.put(UpdateType.UPDATED, ulist);
        failedUpdateMap.put(UpdateType.OLD, olist);
        failedUpdateMap.put(UpdateType.FAILED, flist);
    }

    @Test
    public void testGetEmptyVulnerabilityUpdateStatus() throws Exception {
        assertThat(getEmptyVulnerabilityUpdateStatus().requestStatus, is(RequestStatus.SUCCESS));
        assertThat(getEmptyVulnerabilityUpdateStatus().statusToVulnerabilityIds.get(UpdateType.FAILED),
                is(Collections.EMPTY_LIST));
        assertThat(getEmptyVulnerabilityUpdateStatus().statusToVulnerabilityIds.get(UpdateType.NEW),
                is(Collections.EMPTY_LIST));
        assertThat(getEmptyVulnerabilityUpdateStatus().statusToVulnerabilityIds.get(UpdateType.UPDATED),
                is(Collections.EMPTY_LIST));
        assertThat(getEmptyVulnerabilityUpdateStatus().statusToVulnerabilityIds.get(UpdateType.OLD),
                is(Collections.EMPTY_LIST));
    }

    @Test
    public void testGetEmptyVulnerabilityUpdateStatusWithRequestStatus() throws Exception {
        assertThat(getEmptyVulnerabilityUpdateStatus(RequestStatus.FAILURE).requestStatus, is(RequestStatus.FAILURE));
    }

    @Test
    public void testReduceVulnerabilityUpdateStatusEmptySingle() throws Exception {
        assertThat(reduceVulnerabilityUpdateStatus(emptyVus).requestStatus, is(RequestStatus.SUCCESS));
        assertThat(reduceVulnerabilityUpdateStatus(emptyVus).statusToVulnerabilityIds.get(UpdateType.NEW),
                is(Collections.EMPTY_LIST));
    }

    @Test
    public void testReduceVulnerabilityUpdateStatusSingle() throws Exception {
        assertThat(reduceVulnerabilityUpdateStatus(vus1).getRequestStatus(), is(RequestStatus.SUCCESS));
        assertThat(reduceVulnerabilityUpdateStatus(vus1).statusToVulnerabilityIds.get(UpdateType.UPDATED),
                is(vus1.statusToVulnerabilityIds.get(UpdateType.UPDATED)));
        assertThat(reduceVulnerabilityUpdateStatus(vus1).statusToVulnerabilityIds.get(UpdateType.FAILED),
                is(vus1.statusToVulnerabilityIds.get(UpdateType.FAILED)));
    }

    @Test
    public void testReduceVulnerabilityUpdateStatusTwoWithFirstEmpty() throws Exception {
        assertThat(reduceVulnerabilityUpdateStatus(emptyVus, vus1).getRequestStatus(), is(RequestStatus.SUCCESS));
        assertThat(reduceVulnerabilityUpdateStatus(emptyVus, vus1).statusToVulnerabilityIds.get(UpdateType.UPDATED),
                is(vus1.statusToVulnerabilityIds.get(UpdateType.UPDATED)));
        assertThat(reduceVulnerabilityUpdateStatus(emptyVus, vus1).statusToVulnerabilityIds.get(UpdateType.FAILED),
                is(vus1.statusToVulnerabilityIds.get(UpdateType.FAILED)));
    }

    @Test
    public void testReduceVulnerabilityUpdateStatusTwoWithSecondEmpty() throws Exception {
        assertThat(reduceVulnerabilityUpdateStatus(vus1, emptyVus).getRequestStatus(), is(RequestStatus.SUCCESS));
        assertThat(reduceVulnerabilityUpdateStatus(vus1, emptyVus).statusToVulnerabilityIds.get(UpdateType.UPDATED),
                is(vus1.statusToVulnerabilityIds.get(UpdateType.UPDATED)));
        assertThat(reduceVulnerabilityUpdateStatus(vus1, emptyVus).statusToVulnerabilityIds.get(UpdateType.FAILED),
                is(vus1.statusToVulnerabilityIds.get(UpdateType.FAILED)));
    }

    @Test
    public void testReduceVulnerabilityUpdateStatusFull() throws Exception {
        assertThat(reduceVulnerabilityUpdateStatus(vus1, vus2, vus3).requestStatus, is(RequestStatus.FAILURE));

        assertThat(reduceVulnerabilityUpdateStatus(vus1, vus2, vus3).statusToVulnerabilityIds.get(UpdateType.FAILED),
                containsInAnyOrder("id0", "id1", "id2", "id3", "id4", "id5", "id6", "id7", "id8"));
        assertThat(reduceVulnerabilityUpdateStatus(vus1, vus2, vus3).statusToVulnerabilityIds.get(UpdateType.UPDATED),
                containsInAnyOrder("id0", "id1", "id2", "id3", "id4", "id5", "id6", "id7", "id8"));
        assertThat(reduceVulnerabilityUpdateStatus(vus1, vus2, vus3).statusToVulnerabilityIds.get(UpdateType.NEW),
                containsInAnyOrder("id0", "id1", "id2", "id3", "id4", "id5", "id6", "id7", "id8"));
        assertThat(reduceVulnerabilityUpdateStatus(vus1, vus2, vus3).statusToVulnerabilityIds.get(UpdateType.OLD),
                containsInAnyOrder("id0", "id1", "id2", "id3", "id4", "id5", "id6", "id7", "id8"));
    }

    @Test
    public void getUpdateStatusFromUpdateMapEmpty() throws Exception {
        VulnerabilityUpdateStatus result = getUpdateStatusFromUpdateMap(new HashMap<>());
        assertThat(result.getRequestStatus(), is(RequestStatus.SUCCESS));
        assertThat(result.statusToVulnerabilityIds.get(UpdateType.UPDATED), is(Collections.EMPTY_LIST));
        assertThat(result.statusToVulnerabilityIds.get(UpdateType.NEW), is(Collections.EMPTY_LIST));
    }

    @Test
    public void getUpdateStatusFromUpdateMapSuccess() throws Exception {
        VulnerabilityUpdateStatus result = getUpdateStatusFromUpdateMap(updateMap);
        assertThat(result.getRequestStatus(), is(RequestStatus.SUCCESS));
        assertThat(result.statusToVulnerabilityIds.get(UpdateType.UPDATED), containsInAnyOrder("ue1", "ue2", "ue3"));
        assertThat(result.statusToVulnerabilityIds.get(UpdateType.NEW), containsInAnyOrder("ne1", "ne2"));
    }

    @Test
    public void getUpdateStatusFromUpdateMapFailure() throws Exception {
        VulnerabilityUpdateStatus result = getUpdateStatusFromUpdateMap(failedUpdateMap);
        assertThat(result.getRequestStatus(), is(RequestStatus.FAILURE));
        assertThat(result.statusToVulnerabilityIds.get(UpdateType.UPDATED), containsInAnyOrder("ue1", "ue2", "ue3"));
        assertThat(result.statusToVulnerabilityIds.get(UpdateType.NEW), containsInAnyOrder("ne1", "ne2"));
        assertThat(result.statusToVulnerabilityIds.get(UpdateType.OLD), containsInAnyOrder("oe1", "oe2", "oe3"));
        assertThat(result.statusToVulnerabilityIds.get(UpdateType.FAILED), containsInAnyOrder("fe1", "fe2", "fe3"));
    }

    @Test
    public void testSuccessIdsFromUpdateMapSuccess() throws Exception {
        assertThat(successIdsFromUpdateMap(updateMap),
                containsInAnyOrder("u1", "u2", "u3", "n1", "n2"));
    }

    @Test
    public void testSuccessIdsFromUpdateMapFailure() throws Exception {
        assertThat(successIdsFromUpdateMap(failedUpdateMap),
                containsInAnyOrder("u1", "u2", "u3", "n1", "n2", "o1", "o2", "o3"));
    }
}
