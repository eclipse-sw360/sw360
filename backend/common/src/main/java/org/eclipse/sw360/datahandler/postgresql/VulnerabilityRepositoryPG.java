package org.eclipse.sw360.datahandler.postgresql;

import java.util.List;
import java.util.UUID;
import org.eclipse.sw360.datahandler.postgres.ReleasePG;
import org.eclipse.sw360.datahandler.postgres.VulnerabilityPG;
import org.eclipse.sw360.datahandler.postgres.VulnerabilityReleaseRelationPG;
import org.eclipse.sw360.datahandler.thrift.users.User;
import org.hibernate.Session;

public class VulnerabilityRepositoryPG {

    public VulnerabilityPG createVulnerability(VulnerabilityPG vulnerability) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        VulnerabilityPG savedVulnerability = session.merge(vulnerability);
        session.flush();
        session.getTransaction().commit();
        session.clear();
        session.close();
        return savedVulnerability;
    }

    public List<VulnerabilityPG> getVulnerabilities(User user) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        List<VulnerabilityPG> vulnerabilities =
                session.createQuery("FROM VulnerabilityPG", VulnerabilityPG.class).getResultList();
        session.getTransaction().commit();
        session.close();
        return vulnerabilities;
    }

    public VulnerabilityReleaseRelationPG createVulnerabilityReleaseRelation(
            VulnerabilityReleaseRelationPG relation) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        VulnerabilityReleaseRelationPG savedRelation = session.merge(relation);
        session.flush();
        session.getTransaction().commit();
        session.clear();
        session.close();
        return savedRelation;
    }

    public VulnerabilityPG getVulnerabilityById(String id) {
        if (id == null || id.isEmpty()) {
            return null;
        }
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        VulnerabilityPG vulnerability = session.get(VulnerabilityPG.class, UUID.fromString(id));
        session.getTransaction().commit();
        session.close();
        return vulnerability;
    }

    public List<ReleasePG> getReleasesByVulnerabilityId(String id) {
        if (id == null || id.isEmpty()) {
            return List.of();
        }
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        VulnerabilityPG vulnerability = session.get(VulnerabilityPG.class, UUID.fromString(id));
        List<ReleasePG> releases = vulnerability.getReleasesRelation().stream()
                .map(VulnerabilityReleaseRelationPG::getRelease).toList();
        session.getTransaction().commit();
        session.close();
        return releases;
    }

}
