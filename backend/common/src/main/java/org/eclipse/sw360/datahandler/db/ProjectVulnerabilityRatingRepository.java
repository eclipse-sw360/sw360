/*
 * Copyright (c) Bosch Software Innovations GmbH 2016.
 * Part of the SW360 Portal Project.
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.sw360.datahandler.db;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.eclipse.sw360.datahandler.cloudantclient.DatabaseConnectorCloudant;
import org.eclipse.sw360.datahandler.cloudantclient.DatabaseRepositoryCloudantClient;

import org.eclipse.sw360.datahandler.thrift.vulnerabilities.ProjectVulnerabilityRating;

import com.ibm.cloud.cloudant.v1.model.DesignDocumentViewsMapReduce;

import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * CRUD access for the ProjectVulnerabilityRating class
 *
 * @author birgit.heydenreich@tngtech.com
 */
public class ProjectVulnerabilityRatingRepository extends DatabaseRepositoryCloudantClient<ProjectVulnerabilityRating> {

    private static final Logger log = LogManager.getLogger(ProjectVulnerabilityRatingRepository.class);
    private static final String PROJECT_VULNERABILITY_LINK =
            "function(doc) {" +
                    "  if (doc.type == 'projectvulnerabilityrating') {" +
                    "    emit(doc.projectId, null);" +
                    "  }" +
                    "}";

    private static final String ALL = "function(doc) { if (doc.type == 'projectvulnerabilityrating') emit(null, doc._id) }";

    private static final String BYRELEASEID = "" +
        "function(doc) {" +
            "var ids = {};" +
            "if(doc.type == 'projectvulnerabilityrating') {" +
                "for(var cve in doc.vulnerabilityIdToReleaseIdToStatus) {" +
                    "for(var id in doc.vulnerabilityIdToReleaseIdToStatus[cve]) {" +
                        "if(!ids[doc._id]) {" +
                            "emit(id, null);" +
                            "ids[doc._id] = true;" +
                        "}" +
                    "}" +
                "}" +
            "}" +
        "}";

    public ProjectVulnerabilityRatingRepository(DatabaseConnectorCloudant db) {
        super(db, ProjectVulnerabilityRating.class);
        Map<String, DesignDocumentViewsMapReduce> views = new HashMap<>();
        views.put("projectVulnerabilityRating", createMapReduce(PROJECT_VULNERABILITY_LINK, null));
        views.put("all", createMapReduce(ALL, null));
        views.put("byReleaseId", createMapReduce(BYRELEASEID, null));
        initStandardDesignDocument(views, db);
    }

    public List<ProjectVulnerabilityRating> getProjectVulnerabilityRating(String projectId) {
        List<ProjectVulnerabilityRating> queryResults = queryByPrefix("projectVulnerabilityRating", projectId);

        if (queryResults.size() > 1) {
            log.error("More than one projectVulnerabilityRating found for project with id " + projectId);
        }
        return queryResults;
    }

    List<ProjectVulnerabilityRating> getProjectVulnerabilityRatingsByReleaseId(String releaseId) {
        return queryView("byReleaseId", releaseId);
    }
}
