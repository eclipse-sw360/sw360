/*
 * Copyright Bosch Software Innovations GmbH, 2017.
 * Part of the SW360 Portal Project.
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.sw360.rest.resourceserver.vulnerability;

import java.util.*;

import org.apache.hc.core5.http.HttpStatus;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TCompactProtocol;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.transport.THttpClient;
import org.apache.thrift.transport.TTransportException;
import org.eclipse.sw360.datahandler.common.CommonUtils;
import org.eclipse.sw360.datahandler.common.SW360Utils;
import org.eclipse.sw360.datahandler.thrift.RequestStatus;
import org.eclipse.sw360.datahandler.thrift.SW360Exception;
import org.eclipse.sw360.datahandler.thrift.ThriftClients;
import org.eclipse.sw360.datahandler.thrift.components.ReleaseClearingStatusData;
import org.eclipse.sw360.datahandler.thrift.projects.ProjectService;
import org.eclipse.sw360.datahandler.thrift.users.User;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.CVEReference;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.ProjectVulnerabilityRating;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.ReleaseVulnerabilityRelation;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.VendorAdvisory;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.Vulnerability;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.VulnerabilityApiDTO;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.VulnerabilityCheckStatus;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.VulnerabilityDTO;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.VulnerabilityRatingForProject;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.VulnerabilityService;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.VulnerabilityWithReleaseRelations;
import org.eclipse.sw360.rest.resourceserver.core.JacksonCustomizations.Sw360Module.CVEReferenceMixin;
import org.eclipse.sw360.rest.resourceserver.core.JacksonCustomizations.Sw360Module.VendorAdvisoryMixin;
import org.eclipse.sw360.rest.resourceserver.core.JacksonCustomizations.Sw360Module.VulnerabilityMixinForCreateUpdate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.rest.webmvc.ResourceNotFoundException;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
public class Sw360VulnerabilityService {
    @Value("${sw360.thrift-server-url:http://localhost:8080}")
    private String thriftServerUrl;

    public List<Vulnerability> getVulnerabilities(User sw360User) {
        try {
            VulnerabilityService.Iface sw360VulnerabilityClient = getThriftVulnerabilityClient();
            return sw360VulnerabilityClient.getVulnerabilities(sw360User);
        } catch (TException e) {
            throw new RuntimeException(e);
        }
    }

    public Vulnerability getVulnerabilityByExternalId(String externalId, User sw360User) {
        try {
            VulnerabilityService.Iface sw360VulnerabilityClient = getThriftVulnerabilityClient();
            return sw360VulnerabilityClient.getVulnerabilityByExternalId(externalId, sw360User);
        } catch (SW360Exception sw360Exp) {
            if (sw360Exp.getErrorCode() == HttpStatus.SC_NOT_FOUND) {
                throw new ResourceNotFoundException("Requested Vulnerability Not Found");
            } else if (sw360Exp.getErrorCode() == HttpStatus.SC_FORBIDDEN) {
                throw new AccessDeniedException("Error fetching Vulnerability. User not allowed access");
            } else {
                throw new RuntimeException(sw360Exp);
            }
        } catch (TException exp) {
            throw new RuntimeException(exp);
        }
    }

    public Vulnerability getVulnerabilityWithReleaseRelationsByExternalId(String externalId, User sw360User) {
        try {
            VulnerabilityService.Iface sw360VulnerabilityClient = getThriftVulnerabilityClient();
            final VulnerabilityWithReleaseRelations vulWithRel = sw360VulnerabilityClient.getVulnerabilityWithReleaseRelationsByExternalId(externalId, sw360User);
            return vulWithRel.getVulnerability();
        } catch (TException e) {
            throw new RuntimeException(e);
        }
    }

    public List<VulnerabilityDTO> getVulnerabilitiesByReleaseId(String releaseId, User sw360User) {
        try {
            VulnerabilityService.Iface sw360VulnerabilityClient = getThriftVulnerabilityClient();
            return sw360VulnerabilityClient.getVulnerabilitiesByReleaseId(releaseId, sw360User);
        } catch (TException e) {
            throw new RuntimeException(e);
        }
    }

    public List<VulnerabilityDTO> getVulnerabilityDTOByExternalId (Set<String> externalIds, String releaseId) {
        try {
            VulnerabilityService.Iface sw360VulnerabilityClient = getThriftVulnerabilityClient();
            return sw360VulnerabilityClient.getVulnerabilityDTOByExternalId(externalIds, releaseId);
        } catch (TException e) {
            throw new RuntimeException(e);
        }
    }

    public RequestStatus updateReleaseVulnerabilityRelation(ReleaseVulnerabilityRelation relation, User user) throws TException {
        VulnerabilityService.Iface sw360VulnerabilityClient = getThriftVulnerabilityClient();
        return sw360VulnerabilityClient.updateReleaseVulnerabilityRelation(relation, user);
    }

    public List<VulnerabilityDTO> getVulnerabilitiesByProjectId(String projectId, User sw360User) {
        try {
            VulnerabilityService.Iface sw360VulnerabilityClient = getThriftVulnerabilityClient();
            return sw360VulnerabilityClient.getVulnerabilitiesByProjectId(projectId, sw360User);
        } catch (TException e) {
            throw new RuntimeException(e);
        }
    }

    private VulnerabilityService.Iface getThriftVulnerabilityClient() throws TTransportException {
        THttpClient thriftClient = new THttpClient(thriftServerUrl + "/vulnerabilities/thrift");
        TProtocol protocol = new TCompactProtocol(thriftClient);
        return new VulnerabilityService.Client(protocol);
    }

    public RequestStatus updateProjectVulnerabilityRating(ProjectVulnerabilityRating projVulRatings, User sw360User) {
        try {
            VulnerabilityService.Iface sw360VulnerabilityClient = getThriftVulnerabilityClient();
            return sw360VulnerabilityClient.updateProjectVulnerabilityRating(projVulRatings, sw360User);
        } catch (TException e) {
            throw new RuntimeException(e);
        }
    }

    public List<ProjectVulnerabilityRating> getProjectVulnerabilityRatingByProjectId(String projectId, User sw360User) {
        try {
            VulnerabilityService.Iface sw360VulnerabilityClient = getThriftVulnerabilityClient();
            return sw360VulnerabilityClient.getProjectVulnerabilityRatingByProjectId(projectId, sw360User);
        } catch (TException e) {
            throw new RuntimeException(e);
        }
    }

    public Map<String, Map<String, VulnerabilityRatingForProject>> fillVulnerabilityMetadata(VulnerabilityDTO vulnDto,
            Optional<ProjectVulnerabilityRating> projectVulnerabilityRating) {
        Map<String, Map<String, List<VulnerabilityCheckStatus>>> vulnerabilityIdToStatusHistory = projectVulnerabilityRating
                .map(ProjectVulnerabilityRating::getVulnerabilityIdToReleaseIdToStatus).orElseGet(HashMap::new);

        Map<String, Map<String, VulnerabilityRatingForProject>> vulnerabilityRatings = new HashMap<>();

        String vulnerabilityId = vulnDto.getExternalId();
        String releaseId = vulnDto.getIntReleaseId();
        if (!vulnerabilityRatings.containsKey(vulnerabilityId)) {
            vulnerabilityRatings.put(vulnerabilityId, new HashMap<>());
        }
        List<VulnerabilityCheckStatus> vulnerabilityCheckStatusHistory = null;
        if (vulnerabilityIdToStatusHistory.containsKey(vulnerabilityId)
                && vulnerabilityIdToStatusHistory.get(vulnerabilityId).containsKey(releaseId)) {
            vulnerabilityCheckStatusHistory = vulnerabilityIdToStatusHistory.get(vulnerabilityId).get(releaseId);
        }
        if (CommonUtils.isNotEmpty(vulnerabilityCheckStatusHistory)) {

            VulnerabilityCheckStatus vulnerabilityCheckStatus = vulnerabilityCheckStatusHistory
                    .get(vulnerabilityCheckStatusHistory.size() - 1);
            VulnerabilityRatingForProject rating = vulnerabilityCheckStatus.getVulnerabilityRating();
            vulnerabilityRatings.get(vulnerabilityId).put(releaseId, rating);
        } else {
            vulnerabilityRatings.get(vulnerabilityId).put(releaseId, VulnerabilityRatingForProject.NOT_CHECKED);
        }

        return vulnerabilityRatings;
    }

    public void createUpdateDeleteVulnerability(Vulnerability vulnerability, User sw360User,
            VulnerabilityOperation ops) {
        RequestStatus response = null;
        try {
            VulnerabilityService.Iface sw360VulnerabilityClient = getThriftVulnerabilityClient();

            switch (ops) {
            case CREATE:
                response = sw360VulnerabilityClient.addVulnerability(vulnerability, sw360User);
                break;
            case UPDATE:
                response = sw360VulnerabilityClient.updateVulnerability(vulnerability, sw360User);
                break;
            case DELETE:
                response = sw360VulnerabilityClient.deleteVulnerability(vulnerability, sw360User);
                break;

            }
        } catch (SW360Exception sw360Exp) {
            if (sw360Exp.getErrorCode() == HttpStatus.SC_BAD_REQUEST) {
                throw new HttpMessageNotReadableException(sw360Exp.getWhy());
            } else {
                throw new RuntimeException(sw360Exp);
            }
        } catch (TException e) {
            throw new RuntimeException(e);
        }

        if (response == RequestStatus.ACCESS_DENIED) {
            throw new AccessDeniedException("User not allowed to create/update vulnerabilities");
        } else if (response != RequestStatus.SUCCESS) {
            throw new RuntimeException("Failed to add/update vulnerability");
        }
    }

    public void createUpdateDeleteVulnerabilityReleaseRelation(ReleaseVulnerabilityRelation releaseVulnerabilityRelation, User sw360User,
            VulnerabilityOperation ops) {
        RequestStatus response = null;
        try {
            VulnerabilityService.Iface sw360VulnerabilityClient = getThriftVulnerabilityClient();

            switch (ops) {
            case CREATE:
                response = sw360VulnerabilityClient.addReleaseVulnerabilityRelation(releaseVulnerabilityRelation, sw360User);
                break;
            case DELETE:
                response = sw360VulnerabilityClient.deleteReleaseVulnerabilityRelation(releaseVulnerabilityRelation, sw360User);
                break;

            }
        } catch (SW360Exception sw360Exp) {
            if (sw360Exp.getErrorCode() == HttpStatus.SC_BAD_REQUEST) {
                throw new HttpMessageNotReadableException(sw360Exp.getWhy());
            } else {
                throw new RuntimeException(sw360Exp);
            }
        } catch (TException e) {
            throw new RuntimeException(e);
        }

        if (response == RequestStatus.ACCESS_DENIED) {
            throw new AccessDeniedException("User not allowed to create/update vulnerabilities");
        } else if (response != RequestStatus.SUCCESS) {
            throw new RuntimeException("Failed to add/update vulnerability");
        }
    }
    
    public Vulnerability updateFromVulnerability(Vulnerability destination, Vulnerability source) {
        for (Vulnerability._Fields field : Vulnerability._Fields.values()) {
            if (field.equals(Vulnerability._Fields.REVISION) || field.equals(Vulnerability._Fields.ID)
                    || source.getFieldValue(field) == null) {
                continue;
            }
            destination.setFieldValue(field, source.getFieldValue(field));
        }
        destination.setLastUpdateDate(SW360Utils.getCreatedOn());
        return destination;
    }

    public Vulnerability updateFromVulnerabilityDTO(Vulnerability destination, Vulnerability source, VulnerabilityApiDTO refer) {
        for (Vulnerability._Fields field : Vulnerability._Fields.values()) {
            if (field.equals(Vulnerability._Fields.REVISION) || field.equals(Vulnerability._Fields.ID)
                    || source.getFieldValue(field) == null) {
                continue;
            }
            if ((field.equals(Vulnerability._Fields.CVSS) && (refer.getFieldValue(VulnerabilityApiDTO._Fields.CVSS) == null)) ||
                    (field.equals(Vulnerability._Fields.IS_SET_CVSS) && refer.getFieldValue(VulnerabilityApiDTO._Fields.IS_SET_CVSS) == null)) {
                continue;
            }
            destination.setFieldValue(field, source.getFieldValue(field));
        }
        destination.setLastUpdateDate(SW360Utils.getCreatedOn());
        return destination;
    }

    public VulnerabilityWithReleaseRelations getVulnerabilityWithReleaseRelations(String externalId, User sw360User) {
        try {
            VulnerabilityService.Iface sw360VulnerabilityClient = getThriftVulnerabilityClient();
            final VulnerabilityWithReleaseRelations vulWithRel = sw360VulnerabilityClient
                    .getVulnerabilityWithReleaseRelationsByExternalId(externalId, sw360User);
            return vulWithRel;
        } catch (SW360Exception sw360Exp) {
            if (sw360Exp.getErrorCode() == HttpStatus.SC_NOT_FOUND) {
                throw new ResourceNotFoundException("Requested Vulnerability Not Found");
            } else if (sw360Exp.getErrorCode() == HttpStatus.SC_FORBIDDEN) {
                throw new AccessDeniedException("Error fetching Vulnerability. User not allowed access");
            } else {
                throw new RuntimeException(sw360Exp);
            }
        } catch (TException exp) {
            throw new RuntimeException(exp);
        }
    }

    public ObjectMapper getObjectMapper() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        mapper.addMixIn(Vulnerability.class, VulnerabilityMixinForCreateUpdate.class);
        mapper.addMixIn(CVEReference.class, CVEReferenceMixin.class);
        mapper.addMixIn(VendorAdvisory.class, VendorAdvisoryMixin.class);

        return mapper;
    }

    public enum VulnerabilityOperation {
        CREATE, UPDATE, DELETE;
    }

    public List<ReleaseClearingStatusData> getReleasesClearingStatusWithAccessibility(User user, String projectId)
            throws TException {
        ProjectService.Iface sw360ProjectClient = new ThriftClients().makeProjectClient();
        return sw360ProjectClient.getReleaseClearingStatusesWithAccessibility(projectId, user);
    }
}
