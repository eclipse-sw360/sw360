package org.eclipse.sw360.rest.resourceserver.vulnerabilityopenapi;

import org.springframework.data.rest.webmvc.BasePathAwareController;
import org.springframework.data.rest.webmvc.RepositoryLinksResource;
import org.springframework.hateoas.CollectionModel;
import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.server.RepresentationModelProcessor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import jakarta.servlet.http.HttpServletRequest;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;
import java.net.URISyntaxException;
import java.util.List;

import org.eclipse.sw360.datahandler.componentsApi.model.ReleaseAPI;
import org.eclipse.sw360.datahandler.componentsApi.model.VulnerabilityAPI;
import org.eclipse.sw360.datahandler.postgres.ReleasePG;
import org.eclipse.sw360.datahandler.postgres.VulnerabilityPG;
import org.eclipse.sw360.datahandler.resourcelists.PaginationParameterException;
import org.eclipse.sw360.datahandler.resourcelists.ResourceClassNotFoundException;
import org.eclipse.sw360.datahandler.thrift.users.User;
import org.eclipse.sw360.datahandler.thrift.vulnerabilities.VulnerabilityApiDTO;
import org.eclipse.sw360.rest.resourceserver.core.HalResource;
import org.eclipse.sw360.rest.resourceserver.core.RestControllerHelper;
import org.eclipse.sw360.rest.resourceserver.core.RestControllerHelperPG;

@BasePathAwareController
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
@RestController
@ConditionalOnProperty(name = "feature.experimental.enabled", havingValue = "true")
@SecurityRequirement(name = "tokenAuth")
@SecurityRequirement(name = "basic")
@Validated
public class VulnerabilityOpenAPIController
                implements RepresentationModelProcessor<RepositoryLinksResource> {

        @NonNull
        private final RestControllerHelper restControllerHelper;

        @NonNull
        private final RestControllerHelperPG restControllerHelperPG;

        private final String VULNERABILITIES_URL = "/vulnerabilitiesOpenAPI";

        private final VulnerabilityServicePG vulnerabilityService = new VulnerabilityServicePG();

        @Override
        public RepositoryLinksResource process(RepositoryLinksResource resource) {
                resource.add(linkTo(VulnerabilityOpenAPIController.class)
                                .slash("api/vulnerabilitiesOpenAPI")
                                .withRel("vulnerabilitiesOpenAPI"));
                return resource;
        }

        @PreAuthorize("hasAuthority('WRITE')")
        @Operation(summary = "Create a new vulnerability.",
                        description = "Create a new vulnerability.", tags = {"Vulnerabilities"},
                        responses = {@ApiResponse(responseCode = "201", content = @Content(
                                        mediaType = "application/hal+json",
                                        schema = @Schema(
                                                        implementation = VulnerabilityApiDTO.class)),
                                        description = "Redirection to the created vulnerability.")})
        @PostMapping(VULNERABILITIES_URL)
        public ResponseEntity createVulnerability(@Parameter(
                        description = "The vulnerability to be created.", schema = @Schema(
                                        implementation = VulnerabilityApiDTO.class)) @RequestBody VulnerabilityAPI vulnerability) {

                User user = restControllerHelper.getSw360UserFromAuthentication();

                VulnerabilityAPI createdVulnerability =
                                vulnerabilityService.createVulnerability(vulnerability);

                return ResponseEntity
                                .created(linkTo(VulnerabilityOpenAPIController.class)
                                                .slash("api/vulnerabilitiesOpenAPI")
                                                .slash(createdVulnerability.getId()).toUri())
                                .body(new HalResource<>(createdVulnerability,
                                                linkTo(VulnerabilityOpenAPIController.class)
                                                                .slash("api/vulnerabilitiesOpenAPI")
                                                                .withRel("vulnerabilitiesOpenAPI")));

        }

        @Operation(summary = "List all of the service's vulnerabilities.",
                        description = "List all of the service's vulnerabilities.",
                        tags = {"Vulnerabilities"})
        @GetMapping(value = VULNERABILITIES_URL)
        public ResponseEntity<CollectionModel<EntityModel<HalResource<VulnerabilityPG>>>> getVulnerabilities(
                        org.springframework.data.domain.Pageable pageable,
                        HttpServletRequest request) throws URISyntaxException,
                        PaginationParameterException, ResourceClassNotFoundException {

                List<VulnerabilityPG> vulnerabilities = vulnerabilityService.getVulnerabilities(
                                restControllerHelper.getSw360UserFromAuthentication());

                if (vulnerabilities == null || vulnerabilities.isEmpty()) {
                        return ResponseEntity.ok(CollectionModel.empty());
                }

                List<EntityModel<HalResource<VulnerabilityPG>>> vulnerabilityModels =
                                vulnerabilities.stream().map(vulnerability -> {
                                        List<ReleaseAPI> releases =
                                                        vulnerability.getReleasesRelation().stream()
                                                                        .map(relation -> {
                                                                                ReleasePG releasePG =
                                                                                                relation.getRelease();
                                                                                ReleaseAPI release =
                                                                                                new ReleaseAPI();
                                                                                release.setId(releasePG
                                                                                                .getId());
                                                                                release.setName(releasePG
                                                                                                .getName());
                                                                                release.setVersion(
                                                                                                releasePG.getVersion());
                                                                                return release;
                                                                        }).toList();

                                        HalResource<VulnerabilityPG> halResource =
                                                        new HalResource<>(vulnerability, linkTo(
                                                                        VulnerabilityOpenAPIController.class)
                                                                                        .slash("api/vulnerabilitiesOpenAPI")
                                                                                        .slash(vulnerability
                                                                                                        .getId())
                                                                                        .withSelfRel());

                                        restControllerHelperPG.addEmbeddedReleasesPG(halResource,
                                                        releases);
                                        return EntityModel.of(halResource);
                                }).toList();
                CollectionModel<EntityModel<HalResource<VulnerabilityPG>>> collectionModel =
                                CollectionModel.of(vulnerabilityModels,
                                                linkTo(VulnerabilityOpenAPIController.class)
                                                                .slash("api/vulnerabilitiesOpenAPI")
                                                                .withSelfRel());
                collectionModel.add(linkTo(VulnerabilityOpenAPIController.class)
                                .slash("api/vulnerabilitiesOpenAPI")
                                .withRel("vulnerabilitiesOpenAPI"));

                return ResponseEntity.ok(collectionModel);
        }

        @Operation(summary = "Get a vulnerability by the external ID.",
                        description = "Get a vulnerability by the external ID.",
                        tags = {"Vulnerabilities"})
        @GetMapping(VULNERABILITIES_URL + "/{id}")
        public ResponseEntity<HalResource<VulnerabilityPG>> getVulnerability(@Parameter(
                        description = "The external ID of the vulnerability to be retrieved.") @PathVariable("id") String id) {

                VulnerabilityPG vulnerability = vulnerabilityService.getVulnerabilityById(id);

                List<ReleaseAPI> releases =
                                vulnerability.getReleasesRelation().stream().map(relation -> {
                                        ReleasePG releasePG = relation.getRelease();
                                        ReleaseAPI release = new ReleaseAPI();
                                        release.setId(releasePG.getId());
                                        release.setName(releasePG.getName());
                                        release.setVersion(releasePG.getVersion());

                                        return release;
                                }).toList();

                HalResource<VulnerabilityPG> halResource = new HalResource<>(vulnerability,
                                linkTo(VulnerabilityOpenAPIController.class)
                                                .slash("api/vulnerabilitiesOpenAPI").slash(id)
                                                .withSelfRel(),
                                linkTo(VulnerabilityOpenAPIController.class)
                                                .slash("api/vulnerabilitiesOpenAPI")
                                                .withRel("vulnerabilitiesOpenAPI"));

                restControllerHelperPG.addEmbeddedReleasesPG(halResource, releases);
                return ResponseEntity.ok(halResource);
        }

}
