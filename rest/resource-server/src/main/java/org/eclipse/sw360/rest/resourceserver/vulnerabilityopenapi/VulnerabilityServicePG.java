package org.eclipse.sw360.rest.resourceserver.vulnerabilityopenapi;

import java.util.List;
import java.util.Set;
import org.eclipse.sw360.datahandler.componentsApi.model.ReleaseAPI;
import org.eclipse.sw360.datahandler.componentsApi.model.VulnerabilityAPI;
import org.eclipse.sw360.datahandler.postgres.ReleasePG;
import org.eclipse.sw360.datahandler.postgres.VulnerabilityPG;
import org.eclipse.sw360.datahandler.postgres.VulnerabilityReleaseRelationPG;
import org.eclipse.sw360.datahandler.postgresql.VulnerabilityRepositoryPG;
import org.eclipse.sw360.datahandler.thrift.users.User;
import org.eclipse.sw360.rest.resourceserver.core.HalResource;
import org.springframework.hateoas.Link;

public class VulnerabilityServicePG {
    private final VulnerabilityRepositoryPG vulnerabilityRepository =
            new VulnerabilityRepositoryPG();

    public VulnerabilityPG createVulnerability(VulnerabilityAPI vulnerability) {
        VulnerabilityPG vulnerabilityPG = new VulnerabilityPG(vulnerability);
        if (vulnerability.getReleases() != null && !vulnerability.getReleases().isEmpty()) {
            Set<VulnerabilityReleaseRelationPG> relations = new java.util.HashSet<>();
            for (ReleaseAPI release : vulnerability.getReleases()) {
                VulnerabilityReleaseRelationPG vulnerabilityReleaseRelationPG =
                        new VulnerabilityReleaseRelationPG();
                vulnerabilityReleaseRelationPG.setVulnerability(vulnerabilityPG);
                vulnerabilityReleaseRelationPG.setRelease(new ReleasePG(release));
                relations.add(vulnerabilityReleaseRelationPG);
            }
            vulnerabilityPG.setReleasesRelation(relations);
        } else {
            vulnerabilityPG.setReleasesRelation(Set.of());
        }

        return vulnerabilityRepository.createVulnerability(vulnerabilityPG);
    }

    public List<VulnerabilityPG> getVulnerabilities(User user) {
        List<VulnerabilityPG> vulnerabilities = vulnerabilityRepository.getVulnerabilities(user);
        if (vulnerabilities == null || vulnerabilities.isEmpty()) {
            return List.of();
        }
        return vulnerabilities;
    }

    public VulnerabilityPG getVulnerabilityById(String id) {
        if (id == null || id.isEmpty()) {
            return null;
        }
        return vulnerabilityRepository.getVulnerabilityById(id);
    }

    public List<ReleasePG> getReleasesByVulnerabilityId(String id) {
        if (id == null || id.isEmpty()) {
            return List.of();
        }
        return vulnerabilityRepository.getReleasesByVulnerabilityId(id);
    }

    public List<HalResource<ReleasePG>> getHalReleasesByVulnerabilityId(String id) {
        List<ReleasePG> releases = getReleasesByVulnerabilityId(id);
        if (releases == null || releases.isEmpty()) {
            return List.of();
        }
        return releases.stream().map(release -> new HalResource<>(release,
                Link.of("self", "/releases/" + release.getId()))).toList();
    }
}
